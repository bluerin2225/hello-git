function think_about_file_io_error_handling()
    % 課題: ファイルI/Oの例外処理についてベストなものを考える。
    % 前提: 正常にファイルオープンした場合は必ずファイルクローズを行うこと。
    % 結論: オープンとオープン後のファイル処理で別々に例外処理を行う。
    % 理由: 例外処理の複雑さを回避するため。オープン出来なかった場合とオープン
    % 出来た場合とで必要な例外処理は異なるので、2つの種類の例外処理を混ぜると
    % 複雑さが増す。
    % 補足: actxserverでCOMオブジェクトを扱う場合も同様な例外処理の分割を行う。
    
    % コード: 以下を参照。
    filePath = '適当なファイルパス';

    % -----------------------------------------------------------------
    % ファイルオープン
    % -----------------------------------------------------------------
    try
        % fopenはサポートしていない型が渡されると例外を発生する。
        % 例えばfilePathがcellの場合など。
        % その他に例外が発生するケースは不明。
        % MATLABの各関数の例外情報はどこに記載しているのだろう。
        [fid, msg] = fopen(filePath);
        
        % ファイルを開けない場合はfid=-1、fid=0～2は予約されているので、
        % fidが3以上でないければ例外を発生させる。
        % fopenでエラー発生の場合にはmsgでエラーメッセージが返されるが、
        % 内容は"No such file or directory"のみのようにショボいので、
        % 例外発生時のメッセージは自作した方が良さそう。
        % MATLABのバグか仕様かで、エラーが発生しているのにmsgが空だったら
        % どうしよう、など考えなくても済むため。
        assert(fid >= 3, msg);

    catch me
        % fopenに失敗しているのでfcloseの必要はなし。
        % とりあえずrethrowしているが、try内の処理内容に合わせて
        % 適切な例外処理を行う。
        rethrow(me);
    end
    
    % -----------------------------------------------------------------
    % 正常にファイルオープン出来た場合のファイル処理
    % -----------------------------------------------------------------
    try
        % ファイルの全行をコマンドウィンドウに表示するだけの処理。
        while ~feof(fid)
            disp(fgetl(fid));
        end

        % 正常時のfclose。
        fclose(fid);
        
    catch me
        % 例外発生時も忘れずにfcloseする。
        % fopenもこのcatchに対するtry内で行っていた場合、
        % 以下のように、ファイル識別子の存在とfidの値の両方をチェックした上で
        % fcloseする必要がある。変数fidが存在しない可能性があるため。
        % fidをプログラムの頭で空(fid = [])で初期化して作っておくとも考えられるが、
        % MATLABエディタ上で「使用されていない可能性がある」と警告表示が出てしまうし、
        % MATLAB言語としても不要な初期化のコードはなるべく書かない方が良いはず。
        % C言語出身者には変数宣言や型宣言なしの言語は若干とっつきにくいが。
        % 
        %    if exist('fid', 'var') && fid >= 3 % existに'fid'と書くのが格好悪い。
        %        fclose(fid);
        %    end
        %
        fclose(fid);

        % とりあえずrethrowしているが、try内の処理内容に合わせて
        % 適切な例外処理を行う。
        rethrow(me);
    end
    
    % 正常系と異常系で共通処理が多い場合などでは、上のcatchで例外発生フラグを
    % 立てて、以下のようにtry～catchの後で共通でfloseしても良さそう。
    %
    %     errorOccurred = false;
    %     try
    %         % ファイル処理
    %     catch me
    %         errorOccurred = true;
    %     end
    %     
    %     if errorOccurred
    %         % 例外発生時の処理
    %     end
    %     
    %     % 正常系と異常系とで共通のfclose
    %     fclose(fid);    
end
